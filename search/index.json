[{"content":"数据类型-列表 ","date":"2024-10-07T00:00:00Z","image":"https://UPPO8.github.io/Mybolg/images/PythonCourse/R-C.png","permalink":"https://UPPO8.github.io/Mybolg/p/python%E7%9A%84%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/","title":"Python的线性代数"},{"content":"数据类型-列表 列表：是一种有序的元素集合，用于存储一组有序的数据，可以包含任意数量的元素，并且每个元素可以是不同的数据类型。与字符串不同的是，列表里的元素是可以修改的。\n其表示方法为:\n列表名称 = [元素1,元素2,....,元素n] 列表的访问方式有下标访问和切片访问.列表的下标访问和切片访问与字符串的索引一样.\n不同的是,列表的切片访问可以访问多个元素\n列表的操作 对列表中内容,主要有增加,删除,修改,查找.\n列表的内容增加: append()像列表尾部加入元素; insert()在列表指定位置加入袁术; extend()将一个列表的所有元素添加到另一个列表 1 2 3 4 5 6 7 8 9 10 11 12 ###append()用法### list1 = [1,2,3] list1.append(4) print(list1) ###insert()用法### list2 = [1,2,3] list2.insert(2,4)#在下标2处插入4 print(list2) ###extend()用法### list1 = [1,2,3] list1.extend([4,5,6]) print(list1) 列表的内容删除: remove(元素)删除指定元素,列表中必须包含该元素 pop(下标)移除列表的一个元素,并返回该元素, clear()删除列表中的所有元素 del 关键字,指定下标时删除对应元素,未指定则删除整个列表对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ls = [1,2,3] #remove删除列表中的\u0026#39;1\u0026#39; print(ls.remove(1)) #打印结果:[2,3] #pop将指定下标的元素取出 print(ls.pop(1)) ##打印结果:2 #clear函数 print(ls.clear()) #打印结果:[] #del是一个关键字,当指定下标时,删除指定元素 del ls[0] del ls #不指定下标时,为删除这个列表吗,后续不可再用 列表的内容修改: 修改格式 列表名[索引] = '新内容' 1 2 3 list1 = [1,2,3,4] list1[0] = 0 print(list1) 列表的内容查找: 1.count()返回列表中某个元素的数量 2.使用in关键字查找,如果存在就返回True,否则返回False 1 2 3 4 5 6 7 8 #count使用 ls = [1,2,3,4,5] print(ls.count(3)) #打印结果:1 #使用in关键字 if 1 in ls: print(\u0026#39;1在列表中\u0026#39;) 列表的其他常用操作: len()获取列表中元素的个数 reverse()反转列表中的元素 sort()对列表元素进行排序(只针对数字型列表) copy()对列表的拷贝 ls[][]列表的嵌套,如ls[[1,2],[3,4]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #对数字列表排序 list1 = [1,88,36,45,42,9] list1.sort(reverse=True)#默认False从小到大排序 print(list1) #如果想对字符串排序 list1 = [\u0026#39;a\u0026#39;,\u0026#39;bdf\u0026#39;,\u0026#39;de\u0026#39;,\u0026#39;dasdd\u0026#39;] list1.sort(reverse=True,key=len)#依据字符串的长度排序 print(list1) #列表的浅拷贝, l1 = [1,2,3] l2 = l1.copy() #列表的深拷贝 import copy l3 = copy.deepcopy(l1) #列表推导式,如对列表平方 ls = [1,2,3,4,5] squared_ls = [x ** 2 for x in l1] print(squared_ls) 数据类型-元组 元组:与列表相似,不同之处在于元组的元素不可修改.\n元组的表示使用()表示:\n元组名 = (元素1,元素2,...,元素n) 元组元素的访问,有下标与切片访问,与字符串、列表的方式相同.\n元组的常用操作 元组的常用操作: len():获取元组中元素的个数 max():返回元组中元素最大值 min():返回元组中元素最小值 使用in或not in 查找元素是否在元组中 del:删除元组,使用和列表相同\n元组的推导式语法:\nfor 元素 in 元组 if 条件1 序列 元组、列表、字符串的共同点:\n1.都可以通过下标获取每一个元素. 2.第一个元素的下标为0(从左到右). 3.都可以通过切片的方法获取一个范围. 这些共同点简称序列.其中列表是可变序列,元组和字符串是不可变序列.\n序列的操作 min()和max(),可以用于统计序列中最大值和最小值,根据传入的序列和参数的不同有不同的结果.\nlen()函数:用来计算序列的长度或元素的个数.\nsum()函数:求序列元素的和,可以通过start参数来决定求的初始值.\n1 2 s1 = [1,2,3,4,5] print(sum(s1,start=10)) sorted():用于对序列进行排序,与列表的sort函数不同在于,该函数会返回一个全新的列表,原有的序列不会改变.\n1 2 3 4 s = [1,2,3,4,6] print(sorted(s,reverse=True)) s.sort() print(s) reversed():对序列进行反转,该函数会返回一个迭代器,需要通过强转或for循环来观看元素\n1 2 3 s = [1,2,3,4,5,6] for i in reversed(s1): print(i) all():用于判断序列中的所有元素是否为真,返回布尔值.\nany():用于判断序列中的某个元素是否为真,返回布尔值.\n1 2 3 s = [1,2,3,4,5,6] print(all(s)) print(any(s)) enumerate():用于将一个可遍历对象的数据对象中的下标与元素组合起来,返回的是枚举对象(类似:(0,\u0026lsquo;H\u0026rsquo;))\n1 2 3 s = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;,\u0026#39;e\u0026#39;] for i in enumerate(s): print(i) zip():用于将多个可迭代对象中对应位置的元素打包成一个元组,然后返回这一元组.\n1 2 3 4 5 6 7 l1 = [1,2,3] l2 = [4,5,6] l3 = [7,8,9] l4 = zip(l1,l2) print(list(l4)) l5 = zip(l1,l2,l3) print(list(l5)) 此外还有map()函数:对可迭代对象中的每个元素用一个指定的函数;filter()函数:对可迭代对象中的每个元素用一个指定的函数,并返回结果为真的元素.\n数据类型-集合 集合是一个无序的不重复的序列,分为可变和不可变集合.\n可变集合的元素在定义好之后是不可修改的,但集合本身是可以增加三处元素,这意味着集合的元素只能是数字字符串及元组,并且每个元素只能出现一次.\n集合使用花括号{}表示:\n集合名 = {元素1,元素2,...,元素n} 可变集合的添加 add(): 一次添加单个元素.\nupdata():一次添加多个元素.\n1 2 3 4 5 6 set1 = {1,2,3,4,5} set2 = {4,5,6,7} set1.add(7) print(set1) set2.update(\u0026#39;hello\u0026#39;,\u0026#39;world\u0026#39;) print(set2) remove():删除指定的元素,如果不存在,会报错\ndiscard():删除指定的元素,如果不存在,不会报错\npop():删除第一个元素,如果集合为空,会报错\n1 2 3 4 5 6 7 8 set1 = {1,2,3,4,5} set1.remove(2) set1.remove(9) print(set1) set2 = {4,5,8,9} ret = set2.pop() print(ret) 可变集合元素的查找:\nin:使用关键字查找某元素是否存在于集合中.\n部分其他操作:\nlen():计算集合里元素个数\nset():生成一个集合\ncopy():浅拷贝\nclear():清空集合\nintersection():求两个集合的交集\nunion():求两个集合的并集\nissubset():求两个集合是不是子集关系\nissuperset():求两个集合是不是父集关系\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 set1 = set(\u0026#39;abc\u0026#39;) print(set1) set2 = set1.copy() print(set2) #求交集 set3 = {4,5,6} set4 = {1,2,3,4} set5 ={1} print(set3.intersection(set4)) #求并集 print(set3.union(set4)) #求关系 print(set5.issubset(set4)) print(set4.issuperset(set5)) 每日一曲 ","date":"2024-10-02T00:00:00Z","image":"https://UPPO8.github.io/Mybolg/images/PythonCourse/R-C.png","permalink":"https://UPPO8.github.io/Mybolg/p/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%954/","title":"Python基础语法4"},{"content":"强制数据类型转换 type()函数可以用来查看一个变量的数据类型.目前常见的数据类型用下面几种:\n数据类型 解释 int 整数 float 浮点数 bool 布尔值 str 字符串 list 列表 tuple 元组 set 集合 dict 字典 如果我们想转换数据类型,有两种方式.\n1.显式类型转换\n显式类型转换是强制类型转换,这种转换并不是所有对象都可以安全的转换为任意其他类型,转换的过程中可能会报错.\n2.隐式类型转换\n隐式类型转换则是解释器自动将一种数据类型的值转换为另一种数据类型.\n下面举个例子\n1 2 3 4 5 6 7 8 9 10 11 a = input(\u0026#39;输入整数a:\u0026#39;) b = input(\u0026#39;输入整数b:\u0026#39;) print(a+b) print(type(a)) \u0026#39;\u0026#39;\u0026#39; 打印结果: a:5 b:6 56 \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026#39;\u0026#39;\u0026#39; 可以看到这里打印的a+b是56,使用type函数发现输入的值以字符串形式存储的,这显然不和要求,因此需要进行输入数据转换\n1 2 3 4 a = int(input(\u0026#39;输入整数a:\u0026#39;)) #或者 a = input(\u0026#39;输入整数a:\u0026#39;) a = int(a) 条件语句 条件语句,也叫做判断语句,简单来说就是如果满足某个条件,就去做某件事,不满足就不做.\n条件语句使用if关键字作判断,使用方式三种判断格式:\nif格式 这是一种基础格式,他的执行逻辑:先执行表达式,如果表达式为真,则执行代码块,否则不会执行.\n1 2 3 4 a = int(input(\u0026#39;输入整数a:\u0026#39;)) b = int(input(\u0026#39;输入整数b:\u0026#39;)) if a \u0026lt; b: print(\u0026#34;a小于b\u0026#34;) if-else格式 if-else执行逻辑:先执行表达式,如果表达式为真,则执行代码块1,否则执行代码块2.\n1 2 3 4 5 6 a = int(input(\u0026#39;输入整数a:\u0026#39;)) b = int(input(\u0026#39;输入整数b:\u0026#39;)) if a \u0026lt; b: print(\u0026#34;a小于b\u0026#34;) else: print(\u0026#34;a大于等于b\u0026#34;) if-elif-else if-elif-else的执行逻辑:先执行表达式1，如果表达式1为真则执行代码块1，否则继续执行表达式2；如果表达式2为真则执行代码块2，否则继续向下执行；如果所有的表达式都为假，则 执行else分支。\n1 2 3 4 5 6 7 8 a = int(input(\u0026#39;输入整数a:\u0026#39;)) b = int(input(\u0026#39;输入整数b:\u0026#39;)) if a \u0026lt; b: print(\u0026#34;a小于b\u0026#34;) elif a == b: print(\u0026#34;a等于b\u0026#34;) else: print(\u0026#34;a大于b\u0026#34;) match-case 在Python3.10版本后,新增加了match case语句,也可以用来作条件判断,处理复杂的条件分支:\n1 2 3 4 5 6 7 8 match subject: case condition1: pass#代码块1 case condition2: pass#代码块2 case _: pass#代码块3 循环语句 在Python中,循环语句是程序重复执行一段代码知道满足特定条件为止的关键结构,共有2种格式:for 和 while 两种.\nwhile循环 while循环语法: 如果满足条件,则进入while循环执行代码块,执行完后返回条件再判断返回结果,直到条件不满足,退出循环.\n如下面求1~100累加和的例子\n1 2 3 4 5 6 i = 0 sum = 0 while i \u0026lt;= 100: sum += i i += 1 print(f\u0026#34;1+2+3+...+100的和为:{sum}\u0026#34;) for循环 for循环可以循环遍历任何序列,比如字符串,列表等可遍历对象,只要可遍历 对象没有遍历完,那么代码块就会一直执行,直到可遍历对象遍历完毕.\n1 2 for 临时变量 in 可遍历对象: 代码块 这里的可遍历对象可以是整数序列,整数列表等,也可以直接用range()函数,直接生成一个整数序列对象.\n1 range(start,stop,step) 从语法上可知,这个整数序列从start开始(不写默认为0);到stop结束,但是不包括stop;step为步长(不写默认为1).如range(2,9,1):返回序列[2,3,4,5,6,7,8]\n1 2 3 4 5 # 使用for和range函数生产9*9乘法表 for i in range(1,10): for j in range(1,i+1): print(f\u0026#34;{j} * {i} = {j*i}\u0026#34;,end=\u0026#39; \u0026#39;) print() 循环控制关键字 在for和while循环中,有三种循环控制关键字.\n1.break:在代码块执行过程中终止循环,并跳出本层循环.\n2.continue:在代码块执行过程中终止本次循环，执行下一次循环.\n3.pass:空语句，相当于一个占位符，它的作用是在语法上需要一个语句，但 程序不需要任何操作时使用。例如,某个语句后面不写内容会报错,就会先用pass占位.\n每日一曲 ","date":"2024-10-01T00:00:00Z","image":"https://UPPO8.github.io/Mybolg/images/PythonCourse/R-C.png","permalink":"https://UPPO8.github.io/Mybolg/p/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/","title":"Python基础语法2"},{"content":"数据类型-数字 在Python中,数字类型包括以下几种:\n1.整型int( ):包括正整数,负整数和0,在程序中的表达与数学上一致\n2.浮点型float( ):小数.\n3.布尔型bool( ):特殊的整型,只用True和False,True为1,False为0.\n4.复数complex( ):与数学上表达式一致,分为实部与虚部,用j表示,多用于科学计算.\n布尔型数据的短路求值 在Python中,布尔型数据的短路求值是一种特殊的逻辑运算规则，当逻辑表达式的某个部分已经能够确定整个表达式的值时，就不再计算表达式的其余部分。 比如在下面个例子中\n1 2 3 4 5 a = 10 b = 0 re1 = a or b re2 = a and b print(re1,re2) 数据类型-字符串 字符串由引号括起来的一系列数字,字母,及中文的组合,并且定义好的字符串是不可修改的.\n1 2 3 4 5 6 7 8 9 10 11 #单引号 src = \u0026#39;hello world\u0026#39; #三引号创建多行字符串 src2 = \u0026#39;\u0026#39;\u0026#39; 闲吟秋景外， 万事觉悠悠。 此夜若无月， 一年虚过秋。 \u0026#39;\u0026#39;\u0026#39; print(src1) print(src2) 转义字符 转义字符：是一种特殊字符，用于表示无法直接表示的字符，以反斜杠“\\”开头。\n常用的转义字符：\n换行符：\\n，用于实现换行。 制表符：\\t，相当于一个Tab。 回车符：\\r，将光标移至当前行的开头。 反斜杠：\\\\，将反斜杠本身转义，使反斜杠本身成为一个普通字符。 单引号与双引号：\\’和\\”，将单引号与双引号转义，使其不再是字符串的标识，而是仅仅只是一个单引号或双引号。 字符串的访问 字符串的访问有下标访问与切片访问。下标访问：所谓的下标，其实就是编号，通过编号就可以找到对应的字符，下标可按照从左至右的顺序开始计算，也可以按照从右至左的顺序开始计算，但是访问的时候下标不能超出范围。\nsrc = 'zhangsan' src[0] = z src[1] = h 切片访问与下标访问类似，都是通过字符串的下标进行的，不同的是，下标访问每次只能访问到单个字符，切片访问可以一次访问到多个字符，其访问方式为：\n字符串名[初始位置：终止位置：步长] 访问时，包括初始位置不包括终止位置，且步长默认为1。如果没有给出初始位置，默认初始位置为开始位置；如果没有给出终止位置，默认终止位置为字符串结束位置，此时访问时包括终止位置。\nsrc = 'zhangsan lisi' print(src[0:10:1]) #打印结果:zhangsan l #从左0开始,到第9个,步长为1,打印输出 字符串的操作 字符串的操作总结来说有:查询、转换、判断、分割等\n查询函数 解释 find() 检测字符串是否包含指定字符，如果是则返回开始的索引值，否则返回-1 index() 检测字符串是否包含指定字符，如果是则返回开始的索引值，否则报错 rfind() 从右向左，检测字符串是否包含指定字符，如果是则返回开始的索引值，否则返回-1 rindex() 从右向左，检测字符串是否包含指定字符，如果是则返回开始的索引值，否则报错 转换函数 解释 lower() 将字符串转换为小写 upper() 将字符串转换为大写 title() 将字符串中每个单词的首字母大写 判断函数 解释 startswith() 如果字符串一obj开头,返回True,否则返回False endswith() 如果字符串以obj结尾，则返回True，否则返回False isspace() 如果字符串只包含空格则返回True，否则返回False isalnum() 如果字符串都是字母或数字则返回True，否则返回False isdigit() 如果字符串都是数字则返回True，否则返回False isalpha() 如果字符串都是字母则返回True，否则返回False 分割函数 解释 partition() 将字符串根据参数分割为三部分 rpartition() 从右向左，将字符串根据参数分割为三部分 split() 将字符串根据参数进行分割，且可以指定分割的次数 splitlines() 按照\\n分割，返回一个列表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #字符串的分割 #partition()函数:将字符串按参数分割 str3 = \u0026#39;hello world hello python\u0026#39; print(str3.partition(\u0026#39;world\u0026#39;)) print(str3.rpartition(\u0026#39;world\u0026#39;)) #split()将字符串分割有限次 print(str3.split(\u0026#39; \u0026#39;,2)) print(str3.splitlines()) #count()函数 print(str3.count(\u0026#39;o\u0026#39;)) #join函数 str4 = \u0026#39;_\u0026#39; str5 = [\u0026#39;hello\u0026#39;,\u0026#39;world\u0026#39;] print(str4.join(str5)) #replace函数 print(str3.replace(\u0026#39;hello\u0026#39;,\u0026#39;nihao\u0026#39;)) #capitalize函数,将首字母大写 print(str3.capitalize()) 每日一曲 ","date":"2024-10-01T00:00:00Z","image":"https://UPPO8.github.io/Mybolg/images/PythonCourse/R-C.png","permalink":"https://UPPO8.github.io/Mybolg/p/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%953/","title":"Python基础语法3"},{"content":"引言 Python作者：Guido von Rossum(吉多·范·罗苏姆)\n诞生时期：1991年，第一个Python解释器诞生.它是用C语言实现的，并能够调用C语言的库文件.\n编程语言的种类有很多，但目前常用的有C、C++、Java、JavaScript、C#、PHP、Ruby以及Python，并且在2021年Python已经超过C称为第一受欢迎的编程语言.\nPython的优缺点 以下代码使用C语言和Python输出a+b的例子:\n1 2 3 4 5 6 7 8 9 10 11 12 13 -----C语言中----- #include \u0026lt;stdio.h\u0026gt; int main() { int a = 1; int b = 1; printf(\u0026#34;%d\\n\u0026#34;,a + b); return 0; } -----Python----- a = 1 b = 1 print(a + b) 这里的代码我们可以发现,Python中每行代码通常代表一条语句的结束,且不需要任何的符号作为每行的结束符.\n缩进与注释 在Python中，通过缩进来组织代码块，例如函数体、循环体、类等.缩进必须一直，通常使用空格来实现（推荐使用4个空格），也可以使用一个制表符.并且同一级别的代码块具有相同的缩进量，下一级别的代码块应比上级别的代码 块增加一个缩进层级.例如:\n1 2 3 4 5 # 使用for和range函数生产9*9乘法表 for i in range(1,10): for j in range(1,i+1): print(f\u0026#34;{j} * {i} = {j*i}\u0026#34;,end=\u0026#39; \u0026#39;) print() 这个例子中,单行注释以(#)开头,井号(#)所在位置的右边都会被当作注释.多行注释则是三引号\u0026rsquo;\u0026lsquo;\u0026lsquo;或\u0026quot;\u0026quot;\u0026quot;,引号中间的内容注释掉.\n1 2 3 4 5 6 7 \u0026#39;\u0026#39;\u0026#39; # 求1到100的和 sum = 0 for i in range(1,101,1): sum += i print(sum) \u0026#39;\u0026#39;\u0026#39; 变量与关键字 变量的三个基本属性:\nid号:反映的是变量值的内存地址.\n类型:每一个变量都有自己的类型.\n值:存储的数据.\n1 2 3 4 5 6 7 8 9 10 # 查看变量id好id() # 查看变量类型type() # 使用 is 或 is not 比较两个变量的id号是否相同 a = 2 b = \u0026#39;nihao\u0026#39; c = 2 print(id(a), id(b), id(c)) print(type(a), type(b), type(c)) print(a is b ,a is c) 输出结果:\n1 2 3 140719832613704 3081789329776 140719832613704 \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; False True 输出结果中可以发现,a和c的id号与类型是一致的,使用is判断返回结果为True.\n变量命名的注意事项:\n1.只能包含字母、数字、下划线，但不能以数字开头。\n2.不能包含空格，但是可以使用下划线来分割名称。\n3.不能使用Python的关键字作为标识符的名称。\nPython运算符 在Python中，常用的运算符分为以下几类：\n算数运算符 算术运算符包括以下几种：\n+：加法运算符，返回两个对象的和\n-：减法运算符，返回两个对象的差\n*：乘法运算符，返回两个对象的积\n/：除法运算符，返回两个对象的商\n//：整除运算符，返回两个对象的商的整数部分\n%：取余运算符，返回两个对象的商的余数部分\n**：平方运算符：返回两个对象的平方运算的结果\n比较运算符 比较运算符包括以下几种：\n==：等于，比较两个对象是否相等，返回布尔值\n！=：不等于，比较两个对象是否不相等，返回布尔值\n＞：大于，比较两个对象的大小关系，返回布尔值\n\u0026lt;：小于，比较两个对象的大小关系，返回布尔值\n＜=：大于等于，比较两个对象的大小关系，返回布尔值\n\u0026lt;=：小于等于，比较两个对象的大小关系，返回布尔值\n逻辑运算符 逻辑运算符 逻辑运算符包括以下几种： and：布尔与，and两边都为True时，才会返回True，只要有一个为False，就会返回False\nor：布尔或，or两边都为False时，才会返回False，只要有一个为True，就会返回True\nnot：布尔非，将True改为False，将False改为True\n赋值运算符 赋值运算符包括以下几种： =：赋值运算符，把=右边的对象赋值给=左边的对象\n+=：加法赋值运算符\n-=：减法赋值运算符\n*=：乘法赋值运算符\n/=：除法赋值运算符\n//=：整除赋值运算符\n%=：取余赋值运算符\n**=：平方赋值运算符\n位运算符 位运算符包括以下几种：\n\u0026amp;：按位与，对两个数据的补码进行位与位之间的与运算，全1为1，有0则0\n|：按位或，对两个数据的补码进行位与位之间的或运算，全0为0，有1则1\n^：按位异或，对两个数据的补码进行位与位之间的异或运算，相同为0，同为1\n运算符的优先级 运算符的优先级（从上向下排列，上面的优先级最高）：\n圆括号()：圆括号内的表达式拥有最高优先级\n**：乘方运算\n*、/、%、//：算术运算符，先乘除\n+、-：算数运算符，后加减\n\u0026laquo;、\u0026raquo;：位运算符的左移与右移\n\u0026amp;：位运算符的按位与\n^：位运算符的按位异或\n|：位运算符的按位或\n＞、＜、\u0026gt;=、\u0026lt;=、==、!=：比较运算符\nand、or：逻辑运算符\n=、+=等赋值运算符优先级最低\n输入与输出 在Python中，使用内置的print()函数进行输出，并且有几种不同的输出方式如下所示：\n基本输入输出： 使用input()输入,使用print()输出,直接打印数据或变量:\n1 2 a = 2 print(a) 格式化输出： 使用百分号(%)格式符:\n格式符 解释 %c 字符 %s 字符串 %d 有符号十进制整数 %f 浮点数 %e 科学计数法 %o 八进制整数 现在不推荐使用，但是旧版本的代码中很常见.\n1 2 a = 2 print(\u0026#39;%d\u0026#39;,a) format()方法： 使用花括号{}作为占位符来指定要格式化的数据类型和格式，然后通过将数据插入到占位符中来生成最后的输出结果。\n1 2 3 4 5 6 7 #用format方法 name = \u0026#39;zhangsan\u0026#39; age = 18 weight = 55.55632 print(\u0026#34;My name is {} and {} years old and {} weight\u0026#34;.format(name,age,weight)) # 控制浮点数精度 :.nf,n为位数\\n\u0026#34;, print(\u0026#34;My name is {} and {} years old and {:.4f} weight\u0026#34;.format(name,age,weight)) f-string： 在字符串前加一个f或F，然后在输出的内容中加上花括号{}，花括号{}里面是要输出的表达式，是一种新的字符串格式方法，在Python3.6版本之后引入的输出方法。\n1 2 3 4 5 6 7 #用format方法 name = \u0026#39;zhangsan\u0026#39; age = 18 weight = 55.55632 print(f\u0026#34;My name is {name} and {age} years old and {weight} weight\u0026#34;) # 控制浮点数精度 :.nf,n为位数\\n\u0026#34;, print(f\u0026#34;My name is {name} and {age} years old and {weight:.2f} weight\u0026#34;) 六大基本数据类型 数据类型 解释 mymum = 11 数值 myfloat = 3.141 浮点数 mystr = \u0026lsquo;hello\u0026rsquo; 字符串 mylist = [1,2,3,4] 列表 mytuple = (1,2,3,4) 元组: myset = {1,2,3,4} 集合 mydict = {\u0026ldquo;key1\u0026rdquo;:\u0026ldquo;value1\u0026rdquo;} 字典 强制数据类型转换函数\n函数 解释 int(x) 转换为整数 float(x) 转换为浮点数 str(x) 转换为字符串 tuple(s) 序列转换为元组 list(s) 序列转换为列表 hex(s) 序列转换为16进制 每日一曲 ","date":"2024-09-30T00:00:00Z","image":"https://UPPO8.github.io/Mybolg/images/PythonCourse/write-plan.jpg","permalink":"https://UPPO8.github.io/Mybolg/p/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/","title":"Python基础语法1"},{"content":"使用Python爬取百度图片\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from fake_useragent import UserAgent import requests import re import uuid headers = {\u0026#34;User-agent\u0026#34;: UserAgent().random, # 随机生成一个代理请求 \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;keep-alive\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#39;BAIDU_WISE_UID=wapp_1726906421787_41; ZFY=cggvvWz7Y:AvYezL06fvqCimMOCYkqDMtbJ5RzE0wB1Y:C; BAIDUID_BFESS=316C0566E374307EC37BCF07E6F2F4AF:FG=1; newlogin=1; BIDUPSID=316C0566E374307EC37BCF07E6F2F4AF; BDRCVFR[dG2JNJb_ajR]=mk3SLVN4HKm; H_WISE_SIDS=60829; BDRCVFR[-pGxjrCMryR]=mk3SLVN4HKm; BDRCVFR[tox4WRQ4-Km]=mk3SLVN4HKm; BDRCVFR[A24tJn4Wkd_]=mk3SLVN4HKm; BDRCVFR[X_XKQks0S63]=mk3SLVN4HKm; firstShowTip=1; cleanHistoryStatus=0; RT=\u0026#34;z=1\u0026amp;dm=baidu.com\u0026amp;si=a0fa21b3-7bde-440a-966a-404ccd3e6fdd\u0026amp;ss=m1w0jp0l\u0026amp;sl=i\u0026amp;tt=7cg\u0026amp;bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf\u0026amp;ld=3luz\u0026amp;ul=4pvi\u0026amp;hd=4q6a\u0026#34;; indexPageSugList=%5B%22cat%22%2C%22dog%22%5D; ab_sr=1.0.1_MzQwMjZkMGYwMTM5ZjAzOWYzMGZlMTU2ZjFhOWZkMjlkNDk2NjQzZTdmOTFlYmZkZDFmMjA2YjM3Y2E4YzgxYzU3MTJlYWQ0NjNiNTQwZGM4ZTJiNThmMzBlN2IzMGNmYzI3NzNhMTNhYTc2M2VmODkwZTNjMmJmYTRhNTRmNmE0YTAyNWFiY2UwZGFlM2I4YmM3MGRmM2QxYzcwYjg3Ng==\u0026#39; } img_re = re.compile(\u0026#39;\u0026#34;thumbURL\u0026#34;:\u0026#34;(.*?)\u0026#34;\u0026#39;) img_format = re.compile(\u0026#34;f=(.*).*?w\u0026#34;) def file_op(img): uuid_str = uuid.uuid4().hex tmp_file_name = \u0026#39;E:/HQYJ/course1/images/%s.jpeg\u0026#39; % uuid_str with open(file=tmp_file_name, mode=\u0026#34;wb\u0026#34;) as file: try: file.write(img) except: pass def xhr_url(url_xhr, start_num=0, page=5): end_num = page * 30 for page_num in range(start_num, end_num, 30): resp = requests.get(url=url_xhr + str(page_num), headers=headers) if resp.status_code == 200: img_url_list = img_re.findall(resp.text) # 这是个列表形式 for img_url in img_url_list: img_rsp = requests.get(url=img_url, headers=headers) file_op(img=img_rsp.content) else: break print(\u0026#34;内容已经全部爬取\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: org_url = \u0026#34;https://image.baidu.com/search/acjson?tn=resultjson_com\u0026amp;word={text}\u0026amp;pn=\u0026#34;.format( text=input(\u0026#34;输入你想检索内容:\u0026#34;)) xhr_url(url_xhr=org_url, start_num=int(input(\u0026#34;开始页:\u0026#34;)), page=int(input(\u0026#34;所需爬取页数:\u0026#34;))) ","date":"2024-09-30T00:00:00Z","permalink":"https://UPPO8.github.io/Mybolg/p/%E4%BD%BF%E7%94%A8python%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87/","title":"使用Python爬取百度图片"},{"content":"添加网易云音乐: 在网易云音乐页面,点击一首歌曲, 例如:大鱼 点击生成外链播放器,得到该音乐的HTML插入代码,然后在你的文章md中插入改代码即可播放音乐了.\n添加QQ音乐: QQ音乐获取外链教程具体见:如何获得QQ音乐官方外链播放器并嵌入进网页\n","date":"2024-09-30T00:00:00Z","permalink":"https://UPPO8.github.io/Mybolg/p/%E7%BD%91%E9%A1%B5%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/","title":"网页嵌入式音乐播放器"}]